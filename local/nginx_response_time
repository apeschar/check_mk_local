#!/usr/bin/env python3

"""
Report response times and status codes in Check_MK.

Configure Nginx to log to /var/log/nginx/extra.log using the following lines:

    log_format extra '$host $remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     '$upstream_cache_status $upstream_response_time';

    access_log /var/log/nginx/extra.log extra;

Then copy or symlink this script into /usr/lib/check_mk_agent/local/nginx.
"""

import subprocess
import io
import re
import datetime

import dateutil.parser
import numpy as np


LOGFILE = '/var/log/nginx/extra.log'
FPAT = re.compile('\[(.+?)\]|"(.+?)"|(\S+)')
AFTER = datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(minutes=1)


def main():
    lines = list(log_lines())
    check_response_times(lines)
    check_status_codes(lines)


def check_response_times(lines):
    times = list(response_times(lines))
    p50 = np.percentile(times, 50)
    p95 = np.percentile(times, 95)
    check(
        '0',
        'Nginx_Response_Time',
        '50=%.3f|95=%.3f' % (p50, p95),
        '50th percentile: %dms, 95th percentile: %dms' % (p50*1000, p95*1000)
    )


def check_status_codes(lines):
    counts = {
        200: 0,
        301: 0,
        302: 0,
        304: 0,
        404: 0,
        500: 0,
        502: 0,
        503: 0,
    }
    unknown = set()
    for line in lines:
        try:
            status = int(line[6])
        except ValueError:
            continue
        if status < 200 or status > 599:
            continue
        if status not in counts:
            unknown.add(status)
        else:
            counts[status] += 1
    check(
        '0',
        'Nginx_Response_Status',
        '|'.join('%s=%d' % (k, v) for k, v in sorted(counts.items())),
        '%s; Unknown: %s' % (
            ', '.join('%s: %d' % (k, v) for k, v in sorted(counts.items())),
            ', '.join(str(x) for x in sorted(unknown)) or '-'
        )
    )


def check(*args):
    print(' '.join(args))


def log_lines():
    for line in tac(LOGFILE):
        fields = []
        for match in FPAT.finditer(line):
            fields.append(first_group_of_match(match))
        try:
            timestamp = dateutil.parser.parse(fields[4].replace(':', ' ', 1))
        except:
            continue
        if timestamp < AFTER:
            break
        yield fields


def response_times(lines):
    for fields in lines:
        try:
            response_time = float(fields[11])
        except ValueError:
            continue
        yield response_time


def tac(filename):
    proc = subprocess.Popen(['tac', filename], stdout=subprocess.PIPE)
    return io.TextIOWrapper(proc.stdout, encoding='utf-8')


def first_group_of_match(match):
    for val in match.groups():
        if val is not None:
            return val


if __name__ == '__main__':
    main()
